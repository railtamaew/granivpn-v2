#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ frontend —Å backend API
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
ADMIN_PANEL_URL = "http://localhost:3000"

def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è API...")
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ API –∑–¥–æ—Ä–æ–≤")
            return True
        else:
            print(f"‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints...")
    
    endpoints = [
        ("/", "–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"),
        ("/api/test", "–¢–µ—Å—Ç–æ–≤—ã–π endpoint"),
        ("/api/auth/login", "Login endpoint"),
        ("/api/admin/users", "Users endpoint"),
    ]
    
    for endpoint, description in endpoints:
        try:
            response = requests.get(f"{API_BASE_URL}{endpoint}")
            print(f"‚úÖ {description}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {description}: {e}")

def test_auth_flow():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_user = {
        "email": "admin@granivpn.ru",
        "password": "testpassword123"
    }
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
        response = requests.post(f"{API_BASE_URL}/api/auth/login", json=test_user)
        if response.status_code == 200:
            print("‚úÖ Login endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            token_data = response.json()
            print(f"   –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token_data.get('access_token', '')[:20]}...")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            headers = {"Authorization": f"Bearer {token_data['access_token']}"}
            me_response = requests.get(f"{API_BASE_URL}/api/admin/me", headers=headers)
            if me_response.status_code == 200:
                print("‚úÖ /me endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                user_data = me_response.json()
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('email', '')}")
            else:
                print(f"‚ùå /me endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {me_response.status_code}")
                
        else:
            print(f"‚ùå Login endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

def test_admin_endpoints():
    """–¢–µ—Å—Ç admin endpoints"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ admin endpoints...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    test_user = {
        "email": "admin@granivpn.ru",
        "password": "testpassword123"
    }
    
    try:
        login_response = requests.post(f"{API_BASE_URL}/api/auth/login", json=test_user)
        if login_response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è admin endpoints")
            return
            
        token = login_response.json()["access_token"]
        headers = {"Authorization": f"Bearer {token}"}
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = requests.get(f"{API_BASE_URL}/api/admin/users", headers=headers)
        if users_response.status_code == 200:
            print("‚úÖ /api/admin/users —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå /api/admin/users –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {users_response.status_code}")
            
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_response = requests.get(f"{API_BASE_URL}/api/admin/dashboard", headers=headers)
        if stats_response.status_code == 200:
            print("‚úÖ /api/admin/dashboard —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå /api/admin/dashboard –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {stats_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è admin endpoints: {e}")

def test_cors():
    """–¢–µ—Å—Ç CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        # –¢–µ—Å—Ç —Å origin header
        headers = {"Origin": "http://localhost:3000"}
        response = requests.get(f"{API_BASE_URL}/health", headers=headers)
        
        if "Access-Control-Allow-Origin" in response.headers:
            print("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print(f"   Allow-Origin: {response.headers.get('Access-Control-Allow-Origin')}")
        else:
            print("‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CORS: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GraniVPN API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API
    if not test_api_health():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        return
    
    # –¢–µ—Å—Ç endpoints
    test_api_endpoints()
    
    # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_auth_flow()
    
    # –¢–µ—Å—Ç admin endpoints
    test_admin_endpoints()
    
    # –¢–µ—Å—Ç CORS
    test_cors()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
