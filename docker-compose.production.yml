version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: granivpn-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://granivpn:${DB_PASSWORD}@postgres:5432/granivpn
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - granivpn-network
    volumes:
      - ./backend/logs:/app/logs
      - ./wireguard-configs:/app/wireguard-configs

  # Admin Panel
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile.production
    container_name: granivpn-admin
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - granivpn-network

  # Mobile App (Flutter Web)
  mobile-app:
    build:
      context: ./mobile-app
      dockerfile: Dockerfile.production
    container_name: granivpn-mobile
    restart: unless-stopped
    environment:
      - FLUTTER_WEB_API_URL=http://localhost:8000
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - granivpn-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: granivpn-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=granivpn
      - POSTGRES_USER=granivpn
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - granivpn-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: granivpn-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - granivpn-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: granivpn-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
    depends_on:
      - backend
      - admin-panel
      - mobile-app
    networks:
      - granivpn-network

  # WireGuard VPN Server
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: granivpn-wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - SERVERURL=auto
      - SERVERPORT=51820
      - PEERS=10
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.13.13.0
    volumes:
      - ./wireguard-configs:/config
      - /lib/modules:/lib/modules
    ports:
      - "51820:51820/udp"
    networks:
      - granivpn-network

volumes:
  postgres_data:
  redis_data:

networks:
  granivpn-network:
    driver: bridge
